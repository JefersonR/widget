{"name":"Clicksign","tagline":"Widget","body":"# Índice\r\n\r\n- [Introdução](#introducao)\r\n- [Suporte](#suporte)\r\n- [Funcionamento](#funcionamento)\r\n- [Autenticação](#autenticacao)\r\n- [Opções](#opcoes)\r\n- [Callback](#callback)\r\n- [Versão](#versao)\r\n- [Exemplo](#exemplo)\r\n\r\n# <a name=\"introducao\"></a>Introdução\r\n\r\nMuitas vezes um documento precisa ser assinado dentro de uma aplicação.  Para\r\nisso, a Clicksign desenvolveu um componente que pode ser instalado dentro de\r\noutras páginas eletrônicas.  Este tipo de componente é tradicionalmente chamado\r\nde **widget**.  O uso do _widget_ traz as seguintes vantagens:\r\n\r\n- Não interrompe um fluxo em andamento\r\n- Evita a troca de contexto do usuário\r\n- Oferece maior consistência à experiência do usuário\r\n\r\nPara facilitar a sua vida, a Clicksign já fez a parte difícil e programou um\r\ncomponente extremamente simples de usar que realiza as partes mais complicadas\r\ndesse processo.  Apesar da facilidade, gostamos de deixar claro o que fazemos e\r\ncomo fazemos, por isto, na próxima seção explicaremos como nosso componente\r\nfunciona.  Sinta-se livre para propor melhorias, analisar o código fonte ou\r\napenas questionar o desenvolvimento através da [página do\r\nprojeto](https://github.com/clicksign/widget).\r\n\r\n# <a name=\"funcionamento\"></a>Funcionamento\r\n\r\nO _widget_ é composto de 3 partes:\r\n\r\n1. Um biblioteca _javascript_ que você deverá adicionar à sua página;\r\n2. Um _iframe_ que será criado pela biblioteca acima no _DOM_ de sua página;\r\n3. Um código _HTML_ que será o corpo do _iframe_ acima;\r\n\r\nAbaixo iremos explicar como estes três componentes interagem para prover a\r\nfuncionalidade esperada, bem como qual as etapas necessárias para você colocar o\r\n_widget_ funcionando em sua aplicação.\r\n\r\n## Passo 1: carregar a biblioteca\r\n\r\nA biblioteca _javascript_ da Clicksign precisa ser incluída no corpo da página.\r\nO arquivo pode ser copiado para seu próprio domínio ou você pode utilizar a CDN\r\nda Clicksign.  Recomendamos utilizar a CDN da Clicksign pois você será\r\nbeneficiado pelas correções automáticas que efetuamos ao descobrir alguma falha\r\nna biblioteca.  Todas as correções visam manter compatibilidade dentro da mesma\r\nversão.  Uma alteração que quebre compatibilidade só pode ser efetuada em uma\r\nnova versão da biblioteca.  Mais detalhes em [versão](#versao).\r\n\r\n![Carregando a\r\nbiblioteca](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-1.png)\r\n\r\n## Passo 2: configurar o _widget_\r\n\r\nA biblioteca da Clicksign irá criar um objeto `clicksign` dentro do escopo\r\npadrão, `window`.  Para que o _widget_ seja montado dentro da página você\r\nnecessita chamar a função `configure` no objeto `clicksign`.  Você pode conferir\r\nos parâmetros da função `configure` nas [opções](#opcoes).\r\n\r\n![Configurando a\r\nbiblioteca](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-2.png)\r\n\r\nAo chamar a função `configure`, será adicionado um _iframe_ dentro de um dos\r\nelementos da página.  O _iframe_ irá carregar o conteúdo da Clicksign, este\r\nconteúdo irá executar em contexto próprio, portanto nem o _widget_, nem a página\r\nque o carrega, podem manipular os elementos do outro.\r\n\r\n![Montando o\r\nIFRAME](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-3.png)\r\n\r\nO _widget_ possui fluxo de navegação independente, isto possibilita à Clicksign\r\nrealizar as assinaturas em múltiplas requisições.\r\n\r\n![Demonstrando\r\nfluxo](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-4.png)\r\n\r\n## Passo 3: capturar uma assinatura\r\n\r\nPara aplicações que necessitam _reagir_ a um evento de assinatura, o _widget_\r\nfornece uma chamada de _callback_ que será executada dentro do contexto da\r\npágina.  Esta é a função do parâmetro `callback`.  Você pode conferir a\r\nutilização do parâmetro `callback` nas [opções](#opcoes).\r\n\r\n![Capturando\r\nassinatura](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-5.png)\r\n\r\n# <a name=\"suporte\"></a>Suporte\r\n\r\nDevido ao custo de desenvolvimento e possível perda de usabilidade, o _widget_\r\nda Clicksign oferece suporte oficial apenas aos navegadores mais utilizados no\r\nmercado.  Realizamos testes de compatibilidade com os seguintes navegadores\r\nabaixo listados:\r\n\r\n- Internet Explorer 9\r\n- Internet Explorer 10 \r\n- Internet Explorer 11\r\n- Chrome 36\r\n- Chrome 37\r\n- Firefox 31\r\n- Firefox 32\r\n- Safari 7\r\n- Opera 23\r\n- Opera 24\r\n\r\nSe você utiliza algum navegador que não conste nesta lista não significa que o\r\n_widget_ da Clicksign não funcionará adequadamente, significa apenas que não\r\nrealizamos testes de compatibilidade com o navegador.  Caso seja necessário que\r\na Clicksign suporte oficialmente o navegador, solicite que a equipe de\r\ndesenvolvimento o adicione como um navegador homologado através de\r\nsuporte@clicksign.com.\r\n\r\n# <a name=\"autenticacao\"></a>Autenticação\r\n\r\nA autenticação do usuário é realizada através de um **token** enviado ao e-mail\r\nque foi solicitado a assinatura.  Apenas desta forma nós podemos nos certificar\r\nde que é o dono do e-mail quem está tentado realizar a assinatura.\r\n\r\nO _token_ é gerado e enviado através da Clicksign no momento em que o conteúdo\r\ndo _iframe_ é solicitado aos nossos servidores.  Abaixo segue um diagrama\r\n  representando o momento e o algoritmo utilizado.\r\n\r\n![Envio de\r\ntoken](https://raw.githubusercontent.com/clicksign/widget/master/images/flow-6.png)\r\n\r\nO _token_ é composto de 4 letras, exceto vogais.  Ele possui duração de 10\r\nminutos, após este período, caso o _widget_ seja recarregado, um novo _token_\r\nserá gerado e enviado, o mesmo ocorre caso o usuário solicitar o reenvio do\r\n_token_.\r\n\r\n# <a name=\"opcoes\"></a>Opções\r\n\r\nA realizar a configuração você pode parametrizar alguns propriedades do\r\n_widget_.  A parametrização de algumas propriedades é obrigatória, outras\r\npossuem valores padrão adequados para o ambiente de produção.\r\n\r\n|Propriedade         |Obrigatório|Opções            |Valor padrão        |\r\n|--------------------|:---------:|------------------|--------------------|\r\n|container           |x          |DOM ID            |                    |\r\n|key                 |x          |                  |                    |\r\n|signer.email        |x          |E-mail            |                    |\r\n|signer.display\\_name|           |                  |                    |\r\n|signer.documentation|           |                  |                    |\r\n|callback            |           |                  |function() {}       |\r\n|protocol            |           |HTTP ou HTTPS     |HTTPS               |\r\n|host                |           |URL               |clicksign.com       |\r\n|width               |           |600+              |800                 |\r\n|height              |           |500+              |600                 |\r\n\r\n<dl>\r\n  <dt>container</dt>\r\n  <dd>ID na DOM do elemento no qual o iframe será inserido</dd>\r\n  <dt>key</dt>\r\n  <dd>Chave do documento a ser assinado</dd>\r\n  <dt>signer.email</dt>\r\n  <dd>E-mail do signatário</dd>\r\n  <dt>signer.display_name</dt>\r\n  <dd>Nome signatário para ser auto-preenchido</dd>\r\n  <dt>signer.documentation</dt>\r\n  <dd>CPF do signatário para ser auto-preenchido</dd>\r\n  <dt>callback</dt>\r\n  <dd>Função que será chamada quando ocorrer algum evento no widget</dd>\r\n  <dt>protocol</dt>\r\n  <dd>Protocolo a ser utilizado na montagem do iframe</dd>\r\n  <dt>host</dt>\r\n  <dd>Host a ser utilizado na montagem do iframe</dd>\r\n  <dt>width</dt>\r\n  <dd>Largura em pixels do iframe</dd>\r\n  <dt>height</dt>\r\n  <dd>Altura em pixels do iframe</dd>\r\n</dl>\r\n\r\nSegue abaixo um exemplo de como essa chamada poderia ser realizada para montar\r\num _wiget_ dentro do elemento do DOM ID ```signature-box``` para o usuário com\r\ne-mail ```john.dow@example.com``` assinar no ambiente de demonstração com\r\nlargura de 900 _pixels_ e altura de 1000 _pixels_.\r\n\r\n```javascript\r\nclicksign.configure({\r\n  container: \"signature-box\",\r\n  key: \"0123-4567-89AB-CDEF\",\r\n  signer: {\r\n    email: \"john.doe@example.com\",\r\n    display_name: \"John Doe\",\r\n    documentation: \"01234567890\"\r\n  },\r\n  host: \"widget.clicksign-demo.com\",\r\n  width: 900,\r\n  height: 1000\r\n})\r\n```\r\n\r\n# <a name=\"callback\"></a>Callback\r\n\r\nDeterminados eventos que ocorrem no __widget__ podem ser de interesse da\r\naplicação que o utiliza.  A função __callback__ que é passada como parâmetro na\r\nconfiguração do __widget__ será executada quando algum desses eventos ocorrerem.\r\nEsta função é executada no contexto da aplicação que utiliza o __widget__, dessa\r\nforma você pode manipular sua DOM ou executar outras funções __javascript__\r\nno contexto da sua aplicação.\r\n\r\nAo chamar a função __callback__ é passsado um único parâmetro à função, que\r\nconsiste em uma __String__ com o nome do evento.  Atualmente os eventos\r\npossíveis são:\r\n\r\n- requested\r\n- signed\r\n\r\nDessa forma você pode __filtrar__ os eventos que são de seu interessante, p.e.:\r\n\r\n```javascript\r\ncallback = function(event) {\r\n  return if event != \"signed\";\r\n  alert(\"Documento asssinado!\");\r\n}\r\n```\r\n\r\n# <a name=\"versao\"></a>Versão\r\n\r\nO controle de versão do _widget_ é realizado através da arquivo _javascript_ que\r\nvocê carregar na aplição.  Utilizamos apenas um único número para controle de\r\nversão, caso houver alguma quebra de funcionalidade, o número da versão será\r\nacrescido em um, do contrário, apenas atualizaremos a versão disponível, p.e.:\r\n\r\n|Alteração                                |Versão|\r\n|-----------------------------------------|:----:|\r\n|Versão atual                             |1     |\r\n|Correção de bug em callback              |1     |\r\n|Adição callbacks para casos de erro      |1     |\r\n|Alteração de ordem de chamado de callback|2     |\r\n\r\nO nome do arquivo determina a versão, p.e.: ```clicksign-v1.js``` é a versão 1,\r\n```clicksign-v2.js``` e a versão 2. Você também pode utilizar a propriedade\r\n```version``` do objeto ```clicksign```.  \r\n\r\n# <a name=\"exemplo\"></a>Exemplo\r\n\r\nNo diretório ```examples/``` há um exemplo de uso do widget escrito em\r\n[ruby](http://ruby-lang.org).  Para iniciar o exemplo certifique-se de que estão\r\ninstalados:\r\n\r\n- Ruby 2.1.2\r\n- Rubygems\r\n- Bundler\r\n\r\nInstale as dependências:\r\n\r\n```bash\r\n$ cd examples/\r\n$ bundle install\r\n```\r\n\r\nO servidor de exemplo utiliza API da Clicksign para realizar o _upload_ dos\r\ndocumentos e criar a lista de assinatura.  Para fazer uso desta aplicação você\r\nprecisa de um **access token** configurado no servidor para o qual deseja enviar\r\nas requisições.  O **access token** é disponibilizado pela Clicksign para\r\ndesenvolvedores que foram previamente autorizados.  Para solicitar um **access\r\ntoken** envie um e-mail para suporte@clicksign.com. O controle do **access\r\ntoken** é feito através da variável de ambiente ```ACCESS_TOKEN```.\r\n\r\nA aplicação de exemplo pode ser configurada para acessar outro servidor que não\r\nseja o servidor de produção da Clicksign, isto pode ser útil caso você deseje\r\nrealizar testes em outros ambientes, como _stage_ ou _demo_.  O controle do\r\n_host_ que será direcionada as requisições é feito pela variável de ambiente\r\n```HOST```.  O _host_ padrão é ```widget.clicksign.com```.\r\n\r\nO protocolo de uso da API também pode ser configurado através da variável de\r\nambiente ```PROTOCOL```.  O protocolo padrão é ```HTTPS```.\r\n\r\n|Variável    |Valor padrão |Obrigatório|\r\n|------------|-------------|:---------:|\r\n|ACCESS_TOKEN|             |x          |\r\n|HOST        |clicksign.com|           |\r\n|PROTOCOL    |HTTPS        |           |\r\n\r\nPara iniciar o servidor é necessário interpretar o arquivo ```api-client.rb```\r\ncom o interpretador Ruby.  Segue abaixo um exemplo de como proceder em um\r\nterminal _Unix_.\r\n\r\n```bash\r\n$ cd examples/\r\n$ ACCESS_TOKEN=seu-token ruby api-client.rb\r\n```\r\n\r\nO servidor de exemplo executará um _bind_ na **porta 4567**.  Você poderá\r\nacessa-lo em [http://localhost:4567](http://localhost:4567).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}